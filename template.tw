:: StoryTitle
Testing Pickles


:: StoryData
{
	"ifid": "F9E39354-F641-4070-8B45-C310A3FDC8C8",
	"format": "SugarCube",
	"format-version": "2.36.1",
	"start": "landing",
	"zoom": 0.6
}


:: Story Stylesheet [stylesheet]
@import url("https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;600&display=swap");
@import url("./styles/generics.css");
@import url("./styles/remove-twine.css");
@import url("./styles/styles.css");


:: UserScript [script]
// importScripts("https://cdn.jsdelivr.net/npm/@charisma-ai/sdk@4.0.3/+esm");

:: Story JavaScript [script]
$('#ui-bar').remove();
$(document.head).find('#style-ui-bar').remove();
// TYPEWRITER FN
!function() {
    postrender.typewriter = function (b) {
        if (this.tags) {
            var r = new RegExp("t8n.typewriter.([0-9]+)(?:[^0-9]|$)","g");
            var t = r.exec(this.tags.toString());
            if (t) {
                typeout(b, t[1]+0);
            }
        }
        return b;
    };
    var typeout = function(c,t) {
        var Furl = function(current) {
            this.n = current;
            this.out = false;
            this.data = current.nodeValue;
            current.nodeValue = "";
            this.kids = [];
            var cn = current.childNodes;
            if (current.style && current.style.display=="none") {
                return;
            }
            while (cn.length>0) {
                var f = new Furl(cn[0]);
                current.removeChild(cn[0]);
                f.out = true;this.kids.push(f);
            }
        };
        var nodes = new Furl(c);
        var unfurl = function(furled,d) {
            var n = furled.n;
            if (furled.out) {
                d.appendChild(n);
                furled.out = false;
            }
            if (furled.data) {
                n.nodeValue += furled.data[0];
                furled.data = furled.data.slice(1);
                return true;
            }
            for (var j=0; j<furled.kids.length; j++) {
                var ret = unfurl(furled.kids[j],n);
                if (ret) {
                    return true;
                }
            }
            return false;
        };
        var title = passage();
        var intr = setInterval (
            function() {
                if (passage() == title && unfurl(nodes,null)) {
                    return;
                }
                clearInterval(intr);
            }
        ,t);
    };
}();



// TOUCHEVENTS 
// taken from https://developer.mozilla.org/en-US/docs/Web/API/Touch_events  
setup.startup = () =>  {
  const ongoingTouches = [];
  console.log(ongoingTouches)

const handleStart = (evt) =>{
  evt.preventDefault();
  // log("touchstart.");
  const initial = document.getElementById("initial");
  const stat = document.getElementById("stat");
    const reveal = document.getElementById("reveal");
    //  reveal.classList.add("transparent");  
     initial.classList.add("transparent");  
     console.log(reveal)

}

const handleMove = (evt) => {
  evt.preventDefault();
  
}

const handleEnd = (evt) => {
  evt.preventDefault();
  // log("touchend");
   const initial = document.getElementById("initial");
    const reveal = document.getElementById("reveal");
    //  initial.classList.remove("hide"); 
     initial.classList.remove("transparent");  
  // initial.classList.remove("hide")  
  //   reveal.classList.add("hide");  
  
}

const handleCancel = (evt) => {
  evt.preventDefault();
  // log("touchcancel.");
  const touches = evt.changedTouches;

  for (let i = 0; i < touches.length; i++) {
    let idx = ongoingTouchIndexById(touches[i].identifier);
    ongoingTouches.splice(idx, 1); // remove it; we're done
  }
}

function colorForTouch(touch) {
  // let r = touch.identifier % 16;
  // let g = Math.floor(touch.identifier / 3) % 16;
  // let b = Math.floor(touch.identifier / 7) % 16;
  // r = r.toString(16); // make it a hex digit
  // g = g.toString(16); // make it a hex digit
  // b = b.toString(16); // make it a hex digit
  // const color = `#${r}${g}${b}`;
    const color = `#666`;
  return color;
}


function copyTouch({ identifier, pageX, pageY }) {
  return { identifier, pageX, pageY };
}
function ongoingTouchIndexById(idToFind) {
  for (let i = 0; i < ongoingTouches.length; i++) {
    const id = ongoingTouches[i].identifier;

    if (id === idToFind) {
      return i;
    }
  }
  return -1; // not found
}

function log(msg) {
  const container = document.getElementById("log");
  container.textContent = `${msg} \n${container.textContent}`;
}


    const el = document.getElementById("initial");
  el.addEventListener("touchstart", handleStart);
  el.addEventListener("touchend", handleEnd);
  el.addEventListener("touchcancel", handleCancel);
  // el.addEventListener("touchmove", handleMove);
  // log("Initialized.", el);
}
// document.addEventListener("DOMContentLoaded", startup);

// LOCATION TRACKING

// GET CURRENT POSITION ON LOAD AND SAVE IT IN A VARIABLE 
setup.findCurrentPosition = () => {

  // window.location.reload();
	if ("geolocation" in navigator && typeof navigator.geolocation.watchPosition === "function") {
      console.log("initiating location tracking")
		// setup the success and error callbacks as well as the options object
		var	positionSuccess = function (position) {
				// you could simply assign the `coords` object to `$Location`,
				// however, this assigns only the latitude and longitude since
				// that seems to have been what you were attempting to do before
				state.active.variables["Location"] = {
					latitude  : position.coords.latitude,
					longitude : position.coords.longitude
				};

         state.active.variables["LocationMessage"] = { message: "Position found."};

				// access would be like: $Location.latitude and $Location.longitude
			},
			positionError   = function (error) {
				/* currently a no-op; code that handles errors */
			},
			positionOptions = {
				maximumAge : 60000 // (in ms) cached results may not be older than 1 minute
				                   // this can probably be tweaked upwards a bit
			};

		// since the API is asynchronous, we give `$Location` an initial value, so
		// trying to access it immediately causes no issues if the first callback
		// takes a while
		state.active.variables["Location"] = { latitude : 0, longitude : 0 };
    state.active.variables["LocationMessage"] = { message: "Looking for location."};

		// make an initial call for a position while the system is still starting
		// up, so we can get real data ASAP (probably not strictly necessary as the
		// first call via the `predisplay` task [below] should happen soon enough)
		navigator.geolocation.watchPosition(
			positionSuccess,
			positionError,
			positionOptions
		);

		// register a `predisplay` task which attempts to update the `$Location`
		// variable whenever passage navigation occurs
		predisplay["watchPosition"] = function () {
			navigator.geolocation.watchPosition(
				positionSuccess,
				positionError,
				positionOptions
			);
		};
	} else {
		/* currently a no-op; code that handles a missing/disabled geolocation API */
    console.log("missing/disabled geolocation API")
    state.active.variables["LocationMessage"] = { message: "Missing/disabled geolocation API."};
	}
}

// SET TARGET LOCATION

// CHARISMA

setup.sendQToCharisma = () => {
  console.log("initing Charisma")
  //  CharismaAI.sendQuestion('What is the meaning of life?', function(response) {
  //       // Display the AI's response in a new passage or alert
  //       // Replace 'response' with the actual variable holding the AI's answer
  //       // Example: Create a new passage with the AI's response
  //       var aiResponse = 'The AI says: ' + response;
  //       State.variables.aiResponse = aiResponse;
  //       Engine.play("AI_Response");
  //   });
    // console.log("reponse", State.variables.aiResponse)
;}
setup.sendQToCharisma()

:: StoryInit {"position":"100,100","size":"100,100"}
<<cacheaudio "badjoke" "https://youhavefoundconey.net/CG/what/assets/audio/badjoke.mp3">>
<<waitforaudio>>


:: header {"position":"100,225","size":"100,100"}
<header>Testing Pickles</header>


:: footer [nobr] {"position":"100,375","size":"100,100"}
<footer><div class="nav-wrapper "><div class="nav-item"><<button "Back">><<goto "landing">><</button>></div></div></footer>


:: lost {"position":"450,50","size":"100,100"}
<<set $passage to "lost">><<include "header">>
<main>
Sorry to hear that you're lost! 
You have two options:

<<button "Begin the adventure again">><<goto "landing">><</button>>

<<button "Take me straight to the end location!">><<goto "end">><</button>>
</main>
<<include "footer">>


:: landing [nobr]{"position":"450,50","size":"100,100"}
<<set $passage to "landing">>
<<include "header">>
<main>
  menu

<div class="menu-wrapper">
  /* <<button "enter codeword">><<set $prevpass to $passage>><<goto "codeword">><</button>> */
  /* <<button "ghost detector">><<set $prevpass to $passage>><<goto "ghostdetector">><</button>> */
    <<button "location-based">><<set $prevpass to $passage>><<goto "locationBased">><</button>>
     <<button "lofiar">><<set $prevpass to $passage>><<goto "lofiar">><</button>>
/* <<button "charisma">><<set $prevpass to $passage>><<goto "AI_Interact">><</button>>          */
</div>
</main>
<<include "footer">>


:: codeword  {"position":"450,1875","size":"100,100"}
<<set $passage to "landing">>
<<include "header">>
<main>
Enter codeword 
(which is codeword)

<div id="coderesult"></div>
/% CODEWORD FEEDBACK %/
<div id="resultbutton">
/% CODEWORD INPUT %/
  <div class="code-input"><<textbox "$codeword" "">></div>
  <<button "Enter">>
</div>
/% STANDARDISE INPUT %/
<<set $codeword to $codeword.toUpperCase()>>
/% CODEWORD CORRECT %/
<<if $codeword isnot "" and $codeword is "CODEWORD">>
<<replace "#coderesult">>CORRECT<</replace>>
<<timed 3s>><<set $prevpass to $passage>><<goto "landing">><</timed>>
<</if>>
  /% CODEWORD INCORRECT %/
  <<if $codeword isnot "" and $codeword is not "CODEWORD">>
  <<replace "#coderesult">>Thats not right.<</replace>>
  <<timed 1.5s>><<replace "#coderesult">><</replace>><</timed>>
  <</if>><</button>>
  </div>
  </main>
  <<include "footer">>




:: lofiar[nobr]


<<set $passage to "lofiar">>
<main>
<h2>Lofi AR</h2>
<p> Press to dissolve the image. Stop Press to see old picture. (just on mobile)</p>
  <div class="ar-imgs-container">
    <div class="ar-img-wrapper touch bottom" id="initial" >
      <img src="https://empire-s3-production.bobvila.com/articles/wp-content/uploads/2020/06/Types-of-Palm-Trees.jpg" class="">
      </div>
  </div >

</main>
<<include "footer">>
<<done>><<set $s to setup.startup()>><</done>>


:: landscape[nobr]


<<set $passage to "landscape">>
<main>
<div class="content">
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ac interdum velit, venenatis luctus neque. Sed tempor pretium magna posuere porttitor. </p></div>
<div class="landscape-warning">
<p>You need to be in landscape</p></div>
<div class="comp-warning">
<p>You need to be on a phone</p></div>
</main>
<<include "footer">>


:: locationBased[nobr]

<<set $passage to "locationBased">>
<main>
<p>In the future this will need to:</p>
<ul>
  <li>Show location permissions</li>
  <li>Show an image when in a certain radius</li>
  <li>Provide alternative incase it doesn't work</li>
</ul>
<a href="https://twinery.org/forum/discussion/2789/geolocation-as-trigger">Useful Reddit on geolocation as trigger</a>

<<button "Next">><<goto "setTargetLocation">><</button>>
</main>
<<include "footer">>

:: setTargetLocation 

<<set $passage to "setTargetLocation">>
<main>
<h2>Set target location</h2>
<div class="input-wrapper">
  <label>Target Latitude<<textbox "$targetLat" "">></label>
  <br/>
  <label>Target Longitude<<textbox "$targetLng" "">></label>
</div>
<<button "Set Target Location">><<goto "targetLocation">><</button>>
</main>
<<include "footer">>

:: targetLocation 

<<set $passage to "setTargetLocation">>
<main>
<section class="target-wrapper">
    <h2>Target location saved</h2>
    <div>
    <p>Target Latitude: $targetLat</p>
    <p>Target Longitude: $targetLng</p>
    </div>
  </section>
<<button "Next">><<goto "findMyLocation">><</button>>
</main>
<<include "footer">>


:: findMyLocation [nobr]

<<set $passage to "findMyLocation">>
<main class="find-wrapper">
<div class="location-wrapper">
  <section class="mylocation-wrapper">
    <h2>Find my location 1</h2>

    <p>$LocationMessage.message</p>
    <div>
    <p>My Latitude: $Location.latitude</p>
    <p>My Longitude: $Location.longitude</p>
    </div>
  <<button "Recalibrate">><<goto "findMyLocation2">><</button>>
  </section>
    <section class="target-wrapper">
    <h2>Target location</h2>
    <div>
    <p>Target Latitude: $targetLat</p>
    <p>Target Longitude: $targetLng</p>
    </div>
    
  
  </section>
</div>
<div class="result-wrapper"><<include "checkLocation">></div>
</main>


<<include "footer">>

<<done>><<set $f to setup.findCurrentPosition()>><</done>>


:: findMyLocation2 [nobr]

<<set $passage to "findMyLocation2">>
<main class="find-wrapper">
<div class="location-wrapper">
  <section class="mylocation-wrapper">
    <h2>Find my location 2</h2>

    <p>$LocationMessage.message</p>
    <div>
    <p>My Latitude: $Location.latitude</p>
    <p>My Longitude: $Location.longitude</p>
    </div>
  <<button "Recalibrate">><<goto "findMyLocation">><</button>>
  </section>
    <section class="target-wrapper">
    <h2>Target location</h2>
    <div>
    <p>Target Latitude: $targetLat</p>
    <p>Target Longitude: $targetLng</p>
    </div>
  </section>
</div>
<div class="result-wrapper"><<include "checkLocation">></div>
</main>


<<include "footer">>

<<done>><<set $f to setup.findCurrentPosition()>><</done>>


:: checkLocation

<<if $Location.latitude eq $targetLat>>
  <<if $Location.longitude eq $targetLng>>
  
   <h2> You're in the right place!</h2>
    <<button "Next">><<goto "landing">><</button>>
    <</if>>
    <<else>>
      <h2>You're not in the right place.</h2>

<</if>>

/* $Location.latitude / $targetLat
$Location.longitude / $targetLng */

:: countdown {"position":"450,2300","size":"100,100"}
<<set $passage to "countdown">>
<<include "header">>
<main>
<<set $seconds to 30>>
Countdown: <span id="countdown">$seconds seconds remaining</span>!\
<<silently>>
	<<repeat 1s>>
		<<set $seconds to $seconds - 1>>
		<<if $seconds gt 0>>
			<<replace "#countdown">>$seconds seconds remaining<</replace>>
		<<else>>
			<<replace "#countdown">>Times up!<</replace>>
			<<set $prevpass to $passage>><<goto "landing">>
			<<stop>>
		<</if>>
	<</repeat>>
<</silently>>
</main>
<<include "footer">>



:: ghostdetector {"position":"450,225","size":"100,100"}
<<set $passage to "badchoices">>
<<include "header">>
<main>

  <div class = "detector">
  <<set $spinning to false>>
 
<<link "<img src = 'https://media3.giphy.com/media/1hpCPjWPnKpKLwAGIX/giphy.gif'>" >>
	<<if $spinning>>
    	<<set $spinning to false>>
        <<audio ":all" stop>>
		<<removeclass ".detector" "spinning">>
    <<else>>
   		<<set $spinning to true>>
        <<audio "badjoke" play>>
   	    <<addclass ".detector" "spinning">>
    <</if>>
<</link>> 
</div>
 
</main>
<<include "footer">>

:: AI_Interact
<main>
  <p>Use Charisma AI for a conversation</p>
</main>

<<include "footer">>